package mocks

import (
	memberships "CalFit/business/memberships"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Insert provides a mock function with given fields: ctx, domain
func (_m *Repository) Insert(ctx context.Context, domain memberships.Domain) (memberships.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 memberships.Domain
	if rf, ok := ret.Get(0).(func(context.Context, memberships.Domain) memberships.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(memberships.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, memberships.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx
func (_m *Repository) Get(ctx context.Context) ([]memberships.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []memberships.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []memberships.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]memberships.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Repository) GetById(ctx context.Context, id string) (memberships.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 memberships.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) memberships.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(memberships.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, domain
func (_m *Repository) Update(ctx context.Context, id string, domain memberships.Domain) (memberships.Domain, error) {
	ret := _m.Called(ctx, id, domain)

	var r0 memberships.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, memberships.Domain) memberships.Domain); ok {
		r0 = rf(ctx, id, domain)
	} else {
		r0 = ret.Get(0).(memberships.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, memberships.Domain) error); ok {
		r1 = rf(ctx, id, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
